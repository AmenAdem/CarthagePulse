version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: stocktracker-postgres
    environment:
      POSTGRES_DB: stocktracker
      POSTGRES_USER: stocktracker
      POSTGRES_PASSWORD: password
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stocktracker -d stocktracker"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stocktracker-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: stocktracker-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stocktracker-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: stocktracker-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - stocktracker-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: stocktracker-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stocktracker-network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: stocktracker-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stocktracker-network

  # Enhanced Python Scraper
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: stocktracker-scraper
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      FRED_API_KEY: ${FRED_API_KEY}
    ports:
      - "8000:8000"  # Metrics port
    volumes:
      - ./scraper/config:/app/config
      - ./scraper/logs:/app/logs
    restart: unless-stopped
    networks:
      - stocktracker-network

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: stocktracker-api-gateway
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-myVeryLongSecretKeyThatShouldBeAtLeast256BitsLong}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - stocktracker-network

  # Data Consumer Service
  data-consumer:
    build:
      context: ./microservices/data-consumer
      dockerfile: Dockerfile
    container_name: stocktracker-data-consumer
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/stocktracker
      DATABASE_USERNAME: stocktracker
      DATABASE_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    networks:
      - stocktracker-network

  # Notification Service
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: stocktracker-notification
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/stocktracker
      DATABASE_USERNAME: stocktracker
      DATABASE_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8083:8083"
    networks:
      - stocktracker-network

  # User Service
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: stocktracker-user-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/stocktracker
      DATABASE_USERNAME: stocktracker
      DATABASE_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-myVeryLongSecretKeyThatShouldBeAtLeast256BitsLong}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    networks:
      - stocktracker-network

  # Apache Flink JobManager
  flink-jobmanager:
    image: flink:1.18.0-scala_2.12-java17
    container_name: stocktracker-flink-jobmanager
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8084:8081"  # Flink Web UI
    command: jobmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
        jobmanager.memory.process.size: 1600m
        taskmanager.memory.process.size: 1728m
    volumes:
      - ./flink-jobs/target:/opt/flink/usrlib
    networks:
      - stocktracker-network

  # Apache Flink TaskManager
  flink-taskmanager:
    image: flink:1.18.0-scala_2.12-java17
    container_name: stocktracker-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 2
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
        jobmanager.memory.process.size: 1600m
        taskmanager.memory.process.size: 1728m
    volumes:
      - ./flink-jobs/target:/opt/flink/usrlib
    networks:
      - stocktracker-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stocktracker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - stocktracker-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stocktracker-grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - stocktracker-network

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  stocktracker-network:
    driver: bridge